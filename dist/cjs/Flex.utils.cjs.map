{"version":3,"file":"Flex.utils.cjs","sources":["../../src/Flex.utils.ts"],"sourcesContent":["import { CSSProperties } from \"react\";\nimport {\n  FlexBoxProps,\n  FlexGridProps,\n  ResponsiveFlexDirection,\n  ResponsiveFlexPosition,\n} from \"./Flex.types\";\n\nconst mapAlignment = (alignment?: any): ResponsiveFlexPosition => {\n  if (!alignment) return;\n  if (typeof alignment === \"string\") {\n    switch (alignment) {\n      case \"top\":\n      case \"left\":\n        return \"flex-start\";\n      case \"bottom\":\n      case \"right\":\n        return \"flex-end\";\n      default:\n        return alignment as ResponsiveFlexPosition;\n    }\n  } else if (Array.isArray(alignment)) {\n    return alignment.map(a => mapAlignment(a)) as ResponsiveFlexPosition;\n  } else if (typeof alignment === \"object\") {\n    return Object.fromEntries(\n      Object.entries(alignment).map(([k, a]) => [k, mapAlignment(a)])\n    ) as ResponsiveFlexPosition;\n  }\n};\n\nconst mapDirection = (\n  direction: ResponsiveFlexDirection | null | undefined,\n  reverse: boolean = false\n): ResponsiveFlexDirection => {\n  if (!direction) return \"row\";\n  if (typeof direction === \"string\") {\n    if (![\"row\", \"row-reverse\", \"column\", \"column-reverse\"].includes(direction)) {\n      console.warn(\n        `Using { flex-direction: ${direction} } with mui-flexy shorthand is not recommended \\\nbecause it can cause unexpected alignment and orientation anomalies.`\n      );\n    }\n    switch (direction) {\n      case \"row\":\n      case \"column\":\n        return `${direction}${reverse ? \"-reverse\" : \"\"}`;\n      default:\n        return direction;\n    }\n  } else if (Array.isArray(direction)) {\n    return direction.map(d => (!d ? \"row\" : mapDirection(d, reverse))) as ResponsiveFlexDirection;\n  } else if (typeof direction === \"object\") {\n    return Object.fromEntries(\n      Object.entries(direction).map(([k, d]) => [\n        k,\n        mapDirection(d as ResponsiveFlexDirection, reverse),\n      ])\n    ) as ResponsiveFlexDirection;\n  }\n};\n\nconst stringOrArrayValue = <V extends unknown = unknown>(value: V, index: number) => {\n  if (typeof value === \"string\") {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value?.[index];\n  }\n};\n\nconst mapResponsiveObject = (\n  direction: { [key: string]: CSSProperties[\"flexDirection\"] | null } | undefined | null,\n  main: ResponsiveFlexPosition,\n  cross: ResponsiveFlexPosition\n) => {\n  return Object.fromEntries(\n    Object.entries(direction ?? []).map(([key, d]) => {\n      if (typeof d !== \"string\") {\n        throw new Error(\n          \"Values for a flex direction ResponsiveStyleObject must be strings, e.g. { xs: 'row', sm: 'column' }\"\n        );\n      }\n      if (d.startsWith(\"column\")) {\n        return [\n          key,\n          typeof cross === \"string\" ? cross : mapAlignment(cross)?.[key as keyof typeof cross],\n        ];\n      } else {\n        return [\n          key,\n          typeof main === \"string\" ? main : mapAlignment(main)?.[key as keyof typeof main],\n        ];\n      }\n    })\n  );\n};\n\nconst resolveAlignment = (\n  direction: ResponsiveFlexDirection,\n  x: ResponsiveFlexPosition,\n  y: ResponsiveFlexPosition\n) => {\n  if (typeof direction === \"string\") {\n    const isColumn = direction.startsWith(\"column\");\n    return {\n      justifyContent: mapAlignment(isColumn ? y : x),\n      alignItems: mapAlignment(isColumn ? x : y),\n    };\n  }\n\n  if (Array.isArray(direction)) {\n    return {\n      justifyContent: direction.map((d, i) =>\n        stringOrArrayValue(mapAlignment(d?.startsWith(\"column\") ? y : x), i)\n      ),\n      alignItems: direction.map((d, i) =>\n        stringOrArrayValue(mapAlignment(d?.startsWith(\"column\") ? x : y), i)\n      ),\n    };\n  }\n\n  if (typeof direction === \"object\") {\n    return {\n      justifyContent: mapResponsiveObject(direction, x, y),\n      alignItems: mapResponsiveObject(direction, y, x),\n    };\n  }\n\n  return { justifyContent: x, alignItems: y };\n};\n\nexport const mapFlexProps = <P extends FlexBoxProps | FlexGridProps>(\n  props: FlexBoxProps | FlexGridProps,\n  componentName: \"Box\" | \"Grid\" = \"Box\"\n) => {\n  const { x, y, row, column, flexDirection, reverse, nowrap, ...rest } = props;\n\n  const axis = (\n    row ? \"row\" : column && !row ? \"column\" : flexDirection\n  ) as CSSProperties[\"flexDirection\"];\n  const direction = mapDirection(axis, reverse);\n\n  const whiteSpace = nowrap ? \"nowrap\" : props.whiteSpace;\n  const flexProps = { display: \"flex\", whiteSpace };\n  const className = `${props.className || \"\"} MuiFlex-root${\n    componentName ? ` MuiFlex${componentName}-root` : \"\"\n  }`;\n\n  const alignments = resolveAlignment(direction, x, y);\n\n  return {\n    ...rest,\n    ...flexProps,\n    ...alignments,\n    flexDirection: direction,\n    className,\n  } as unknown as P;\n};\n\nexport const _test = {\n  mapAlignment,\n  mapDirection,\n  mapFlexProps,\n};\n"],"names":["mapAlignment","alignment","Array","isArray","map","a","Object","fromEntries","entries","k","mapDirection","direction","reverse","includes","console","warn","d","stringOrArrayValue","value","index","mapResponsiveObject","main","cross","key","Error","startsWith","resolveAlignment","x","y","isColumn","justifyContent","alignItems","i","mapFlexProps","props","componentName","row","column","flexDirection","nowrap","rest","axis","whiteSpace","flexProps","display","className","alignments"],"mappings":"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"}